<div class="w3-container" style="height: 30vh;">
    <div class="w3-card-4 p-4 mb-4">
        <form id="editNurseryForm" method="POST">
            <div class="row mb-2">
              <div class="col-6">
                <input id="nameInput" type="text" name="name" placeholder="Name" value=<%= centroid.name %> style="width: 100%;" required>
              </div>
              <div class="col-2">
                <input type="color" id="color" name="color" value=<%= centroid.color %> style="height: 100%;" onchange="refreshPolygon()">
              </div>
              <div class="col-4"><button class="btn" type="submit">Edit Nursery</button></div>
            </div>
            <div id="map" style="height: 400px;" class="leaf-overlay-below"></div>
        </form>
    </div>
    <div class="w3-card-4 mb-3 w3-row"> 
      <table class="w3-table w3-centered">
        <tr>
          <th><h3>Number of Plants</h3></th>
          <th><h3>Clones Used</h3></th>
          <th><h3>Number of Workers</h3></th>
          <th><h3>Estimated Area Coverage</h3></th>
        </tr>
        <tr>
          <td><p class="w3-xxxlarge"><%= plants.length %></p></td>
          <td><p class="w3-xxxlarge"><%= plants.length %></p></td>
          <td><p class="w3-xxxlarge"><%= plants.length %></p></td>
          <td><p class="w3-xxxlarge"><%= plants.length %></p></td>
        </tr>
      </table>
    </div>


    <div class="w3-card-4 p-4 mb-4">
      <div class="table-responsive w3-padding">                 
        <table id="data-table" class="table table-striped table-bordered">
          <thead>
            <tr>
              <th>ID</th>
              <th>Tag ID</th>
              <th>Clone ID</th>
              <th>Latitude</th>
              <th>Longitude</th>
              <th>Date Sow</th>
              <th>Nursery ID</th>
              <th>Created At</th>
              <th>DSB</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            <% plants.forEach(row => { %>
              <tr>
                <td><%= row.id %></td>
                <td><%= row.tag_id %></td>
                <td><%= row.clone_id%></td>
                <td><%= row.coordinate_lat %></td>
                <td><%= row.coordinate_long %></td>
                <td><%= row.date_sow%></td>
                <td><%= row.nursery_id %></td>
                <td><%= row.created_at %></td>
                <td><%= row.dsb %></td>
                <td><%= row.status%></td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <script>
    $(document).ready(function() {
      $('#data-table').DataTable({
  
      });
  
    });
  </script>
  <script>  
    //polygon array
    polygonPoints = [];
    var polygon;
    markers = [];
    var centroid;
    plantMarkers = [];   

    //draw from points
    var arr;
    var parameters = <%-JSON.stringify(parameters)%>;
    var centroid = <%-JSON.stringify(centroid)%>;
    var plants = <%-JSON.stringify(plants)%>;
    var nurseryId = centroid.id;

    // initialize map
    var map = L.map('map').setView([centroid.coordinate_lat, centroid.coordinate_long], 15);
  
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
    //add geocoder to map
    L.Control.geocoder().addTo(map);

  
    //marker icon style
    const redIcon = new L.Icon({
      iconUrl:
        "/images/icons/marker-icon-2x-red.png",
      shadowUrl:
        "/images/icons/marker-shadow.png",
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });
    const greenIcon = new L.Icon({
      iconUrl:
        "/images/icons/marker-icon-2x-green.png",
      shadowUrl:
        "/images/icons/marker-shadow.png",
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });



    //push points to local polygon points array
    parameters.forEach(parameter => {
      polygonPoints.push([parseFloat(parameter.coordinate_lat), parseFloat(parameter.coordinate_long)]);

      //create markers too
      markers.push(L.marker(polygonPoints[polygonPoints.length-1],{
          draggable: true,
          autoPan: true,
          icon: redIcon
      }).addTo(map));

    });
    polygon = L.polygon(polygonPoints).addTo(map).setStyle({color: document.getElementById('color').value, fillColor: document.getElementById('color').value, fillOpacity: 0.5});
    centroid = L.marker([centroid.coordinate_lat, centroid.coordinate_long],{
    icon: greenIcon
    }).addTo(map);

    //get initial centroidPoint
    centroidPoint = getPolygonCentroid(polygonPoints);

    //draw points from plants
    plants.forEach(plant =>{
      plantMarkers.push(L.circleMarker([parseFloat(plant.coordinate_lat), parseFloat(plant.coordinate_long)], {
        color: plant.color,
        radius: 1,
        opacity: 1,
      }).addTo(map));
    });
  
    //polygon event
    function onMapClick(e) {
      //add new point
      polygonPoints.push([e.latlng.lat, e.latlng.lng]);
  
      markers.push(L.marker(polygonPoints[polygonPoints.length-1],{
        draggable: true,
        autoPan: true,
        icon: redIcon
      }).addTo(map));
      // remove previous polygon
      refreshPolygon();
  
      // //find centroid
      // centroidPoint = getPolygonCentroid(polygonPoints);
      // centroid = L.marker([centroidPoint.x, centroidPoint.y],{
      //   icon: greenIcon
      // }).addTo(map);
  
    }
    map.on('click', onMapClick);
  
    //marker event
    mapClickListen();
    function mapClickListen(e) {
        for(let i=0; i<markers.length; i++){
          markers[i].on('drag', function(e) {
            console.log('marker drag event');
          });
          markers[i].on('dragstart', function(e) {
            console.log('marker dragstart event');
            map.off('click', mapClickListen);
          });
          markers[i].on('dragend', function(e) {
            console.log('marker dragend event');
            //update polygonPoint
            polygonPoints[i] = [markers[i].getLatLng().lat, markers[i].getLatLng().lng];
  
            //refresh polygon
            refreshPolygon();
            // //find centroid
            // centroidPoint = getPolygonCentroid(polygonPoints);
            // centroid = L.marker([centroidPoint.x, centroidPoint.y],{
            //     icon: greenIcon
            // }).addTo(map);

            setTimeout(function() {
              map.on('click', mapClickListen);
            }, 10);
          });
        }
      }
  
    //refresh polygon and centroid point (map only)
    function refreshPolygon(){
      if(polygon){
        map.removeLayer(polygon);
      }
      if(centroid){
        map.removeLayer(centroid);
      }
      
      //create new polygon
      polygon = L.polygon(polygonPoints).addTo(map).setStyle({color: document.getElementById('color').value, fillColor: document.getElementById('color').value, fillOpacity: 0.5});
      //find centroid
      centroidPoint = getPolygonCentroid(polygonPoints);
      centroid = L.marker([centroidPoint.x, centroidPoint.y],{
        icon: greenIcon
      }).addTo(map);

      plantMarkers.forEach(plantMarker =>{
        plantMarker.bringToFront();
      });
    }
  
    function getPolygonCentroid(points) {
      var centroidX = 0, centroidY = 0;
      var area = 0;
      var prevIndex = points.length - 1;
      
      for (var i = 0; i < points.length; i++) {
        var currPoint = points[i];
        var prevPoint = points[prevIndex];
        var crossProduct = (prevPoint[0] * currPoint[1]) - (currPoint[0] * prevPoint[1]);
        area += crossProduct;
        centroidX += (prevPoint[0] + currPoint[0]) * crossProduct;
        centroidY += (prevPoint[1] + currPoint[1]) * crossProduct;
        prevIndex = i;
      }
      
      area /= 2;
      centroidX /= (6 * area);
      centroidY /= (6 * area);
      
      return {x: centroidX, y: centroidY};
    }
  
    $("#editNurseryForm").submit(function(e) {
      // get value from form
      var nameSend = document.getElementById("nameInput").value;
      var polygonJSON = JSON.stringify(polygonPoints);
      e.preventDefault();
      $.ajax({
        url: "/nursery/update",
        type: "POST",
        data: {
              id: nurseryId,
              name: nameSend,
              locationLat: centroidPoint.x,
              locationLong: centroidPoint.y,
              polygonPoints: polygonJSON,
              color: document.getElementById('color').value
        },
        success: function(data){
          window.location.href = "/nursery/"+data.id;
        },
        error: function (jqXHR, exception) {
          var msg = '';
          if (jqXHR.status === 0) {
              msg = 'Not connect.\n Verify Network.';
          } else if (jqXHR.status == 404) {
              msg = 'Requested page not found. [404]';
          } else if (jqXHR.status == 500) {
              msg = 'Internal Server Error [500].';
          } else if (exception === 'parsererror') {
              msg = 'Requested JSON parse failed.';
          } else if (exception === 'timeout') {
              msg = 'Time out error.';
          } else if (exception === 'abort') {
              msg = 'Ajax request aborted.';
          } else {
              msg = 'Uncaught Error.\n' + jqXHR.responseText;
          }
          alert(msg);
        }
      });
    });
  
    function openCreateModal(){
      document.getElementById('id01').style.display='block'
      refreshMap();
    }
    function refreshMap(){
      map.invalidateSize();
    }
  
  </script>